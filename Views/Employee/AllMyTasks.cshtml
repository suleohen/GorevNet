@model List<GorevNet.Models.UserTask>
@{
    ViewBag.Title = "Tüm Görevlerim";
    Layout = "_EmployeeLayout";
}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">
        <i class="fas fa-list text-primary mr-2"></i>Tüm Görevlerim
    </h1>
    <div class="d-none d-sm-inline-block">
        <span class="text-gray-600">@ViewBag.EmployeeName - @ViewBag.TotalTasks görev</span>
    </div>
</div>

<!-- İstatistik Kartları -->
<div class="row mb-4">
    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-primary shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                            Toplam Görev
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">@ViewBag.TotalTasks</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-tasks fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-success shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                            Tamamlanan
                        </div>
                        <div class="row no-gutters align-items-center">
                            <div class="col-auto">
                                <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">@ViewBag.CompletedTasks</div>
                            </div>
                            <div class="col">
                                @{
                                    var completionRate = ViewBag.TotalTasks > 0 ? (double)ViewBag.CompletedTasks / ViewBag.TotalTasks * 100 : 0;
                                }
                                <div class="progress progress-sm mr-2">
                                    <div class="progress-bar bg-success" role="progressbar"
                                         style="width: @completionRate%" aria-valuenow="@completionRate"
                                         aria-valuemin="0" aria-valuemax="100"></div>
                                </div>
                            </div>
                        </div>
                        <small class="text-success">%@completionRate.ToString("F1") başarı oranı</small>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-check-circle fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-warning shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                            Devam Eden
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">@ViewBag.OngoingTasks</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-play-circle fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6 mb-4">
        <div class="card border-left-info shadow h-100 py-2">
            <div class="card-body">
                <div class="row no-gutters align-items-center">
                    <div class="col mr-2">
                        <div class="text-xs font-weight-bold text-info text-uppercase mb-1">
                            Bekleyen
                        </div>
                        <div class="h5 mb-0 font-weight-bold text-gray-800">@ViewBag.PendingTasks</div>
                    </div>
                    <div class="col-auto">
                        <i class="fas fa-pause-circle fa-2x text-gray-300"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filtre Seçenekleri -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <div class="row align-items-center">
            <div class="col">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-filter mr-2"></i>Görevleri Filtrele
                </h6>
            </div>
            <div class="col-auto">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-outline-primary active" data-filter="all">
                        <i class="fas fa-list"></i> Tümü
                    </button>
                    <button type="button" class="btn btn-outline-info" data-filter="pending">
                        <i class="fas fa-pause"></i> Bekleyen
                    </button>
                    <button type="button" class="btn btn-outline-warning" data-filter="ongoing">
                        <i class="fas fa-play"></i> Devam Eden
                    </button>
                    <button type="button" class="btn btn-outline-success" data-filter="completed">
                        <i class="fas fa-check"></i> Tamamlanan
                    </button>
                    <button type="button" class="btn btn-outline-danger" data-filter="overdue">
                        <i class="fas fa-exclamation-triangle"></i> Süresi Geçen
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Ana İçerik -->
<div class="card shadow mb-4">
    <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
        <h6 class="m-0 font-weight-bold text-primary">
            <i class="fas fa-tasks mr-2"></i>Görevlerim (@Model.Count)
        </h6>
        <div class="dropdown no-arrow">
            <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
               data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
            </a>
            <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                 aria-labelledby="dropdownMenuLink">
                <div class="dropdown-header">Seçenekler:</div>
                <a class="dropdown-item" href="@Url.Action("ActiveTasks", "Employee")">
                    <i class="fas fa-clock fa-sm fa-fw mr-2 text-gray-400"></i>
                    Sadece Aktif Görevler
                </a>
                <a class="dropdown-item" href="@Url.Action("Index", "Employee")">
                    <i class="fas fa-home fa-sm fa-fw mr-2 text-gray-400"></i>
                    Ana Sayfa
                </a>
            </div>
        </div>
    </div>

    <div class="card-body">
        @if (Model.Any())
        {
            <div class="table-responsive">
                <table class="table table-bordered" id="dataTable" width="100%" cellspacing="0">
                    <thead class="thead-light">
                        <tr>
                            <th>Görev</th>
                            <th>Durum</th>
                            <th>Öncelik</th>
                            <th>Oluşturulma</th>
                            <th>Bitiş Tarihi</th>
                            <th>İşlemler</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in Model)
                        {
                            var isCompleted = task.Status == GorevNet.Models.TaskStatus.Tamamlandı;
                            var isOverdue = task.DueDate.HasValue && task.DueDate.Value < DateTime.Now && !isCompleted;
                            var rowClass = isCompleted ? "table-success" : isOverdue ? "table-danger" : "";

                            <tr class="task-item @rowClass"
                                data-status="@task.Status.ToString().ToLower()"
                                data-overdue="@(isOverdue ? "true" : "false")"
                                id="task-row-@task.Id">
                                <td>
                                    <div class="d-flex align-items-start">
                                        <div class="flex-grow-1">
                                            <strong class="@(isCompleted ? "text-success" : "")">
                                                @if (isCompleted)
                                                {
                                                    <i class="fas fa-check-circle text-success mr-1"></i>
                                                }
                                                @task.Title
                                            </strong>
                                            @if (!string.IsNullOrEmpty(task.Description))
                                            {
                                                <br>
                                                <small class="text-muted">
                                                    @(task.Description.Length > 100 ? task.Description.Substring(0, 100) + "..." : task.Description)
                                                </small>
                                            }
                                            @if (!string.IsNullOrEmpty(task.Comment))
                                            {
                                                <br>
                                                <small class="text-info">
                                                    <i class="fas fa-comment fa-xs mr-1"></i>
                                                    Son yorum var
                                                </small>
                                            }
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    @{
                                        string statusClass = task.Status switch
                                        {
                                            GorevNet.Models.TaskStatus.Tamamlandı => "badge-success",
                                            GorevNet.Models.TaskStatus.DevamEdiyor => "badge-warning",
                                            GorevNet.Models.TaskStatus.Beklemede => "badge-info",
                                            _ => "badge-secondary"
                                        };

                                        string statusText = task.Status switch
                                        {
                                            GorevNet.Models.TaskStatus.Tamamlandı => "Tamamlandı",
                                            GorevNet.Models.TaskStatus.DevamEdiyor => "Devam Ediyor",
                                            GorevNet.Models.TaskStatus.Beklemede => "Beklemede",
                                            _ => "Bilinmiyor"
                                        };

                                        string statusIcon = task.Status switch
                                        {
                                            GorevNet.Models.TaskStatus.Tamamlandı => "fas fa-check",
                                            GorevNet.Models.TaskStatus.DevamEdiyor => "fas fa-play",
                                            GorevNet.Models.TaskStatus.Beklemede => "fas fa-pause",
                                            _ => "fas fa-question"
                                        };
                                    }
                                    <span class="badge @statusClass" id="status-badge-@task.Id">
                                        <i class="@statusIcon mr-1"></i>@statusText
                                    </span>
                                </td>
                                <td>
                                    @{
                                        string priorityClass = task.Priority switch
                                        {
                                            GorevNet.Models.TaskPriority.Yüksek => "badge-danger",
                                            GorevNet.Models.TaskPriority.Normal => "badge-primary",
                                            GorevNet.Models.TaskPriority.Düşük => "badge-secondary",
                                            _ => "badge-secondary"
                                        };

                                        string priorityText = task.Priority switch
                                        {
                                            GorevNet.Models.TaskPriority.Yüksek => "🔴 Yüksek",
                                            GorevNet.Models.TaskPriority.Normal => "🟡 Normal",
                                            GorevNet.Models.TaskPriority.Düşük => "🔵 Düşük",
                                            _ => "Bilinmiyor"
                                        };
                                    }
                                    <span class="badge @priorityClass">@priorityText</span>
                                </td>
                                <td>
                                    <small>
                                        <i class="fas fa-calendar-plus text-muted mr-1"></i>
                                        @task.CreatedDate.ToString("dd/MM/yyyy")
                                        <br>
                                        <span class="text-muted">@task.CreatedDate.ToString("HH:mm")</span>
                                    </small>
                                </td>
                                <td>
                                    @if (task.DueDate.HasValue)
                                    {
                                        var daysLeft = (task.DueDate.Value - DateTime.Now).Days;
                                        if (isCompleted)
                                        {
                                            <span class="text-success">
                                                <i class="fas fa-check-circle"></i>
                                                @task.DueDate.Value.ToString("dd/MM/yyyy")
                                                <br><small>Tamamlandı</small>
                                            </span>
                                        }
                                        else if (daysLeft < 0)
                                        {
                                            <span class="text-danger">
                                                <i class="fas fa-exclamation-triangle"></i>
                                                @task.DueDate.Value.ToString("dd/MM/yyyy")
                                                <br><small><strong>@Math.Abs(daysLeft) gün gecikti!</strong></small>
                                            </span>
                                        }
                                        else if (daysLeft <= 2)
                                        {
                                            <span class="text-warning">
                                                <i class="fas fa-clock"></i>
                                                @task.DueDate.Value.ToString("dd/MM/yyyy")
                                                <br><small><strong>@daysLeft gün kaldı</strong></small>
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-success">
                                                <i class="fas fa-calendar-check"></i>
                                                @task.DueDate.Value.ToString("dd/MM/yyyy")
                                                <br><small>@daysLeft gün var</small>
                                            </span>
                                        }
                                    }
                                    else
                                    {
                                        <span class="text-muted">
                                            <i class="fas fa-calendar-times"></i>
                                            Belirlenmemiş
                                        </span>
                                    }
                                </td>
                                <td>
                                    <div class="btn-group-vertical btn-group-sm" role="group">
                                        @if (!isCompleted)
                                        {
                                            @if (task.Status == GorevNet.Models.TaskStatus.Beklemede)
                                            {
                                                <button type="button" class="btn btn-success btn-sm mb-1"
                                                        onclick="updateTaskStatus(@task.Id, @((int)GorevNet.Models.TaskStatus.DevamEdiyor), 'Göreve başladım')"
                                                        title="Göreve Başla">
                                                    <i class="fas fa-play"></i> Başla
                                                </button>
                                            }
                                            else if (task.Status == GorevNet.Models.TaskStatus.DevamEdiyor)
                                            {
                                                <button type="button" class="btn btn-warning btn-sm mb-1"
                                                        onclick="updateTaskStatus(@task.Id, @((int)GorevNet.Models.TaskStatus.Beklemede), 'Görevi durdurdum')"
                                                        title="Durdur">
                                                    <i class="fas fa-pause"></i> Durdur
                                                </button>
                                                <button type="button" class="btn btn-success btn-sm mb-1"
                                                        onclick="completeTask(@task.Id)"
                                                        title="Tamamla">
                                                    <i class="fas fa-check"></i> Tamamla
                                                </button>
                                            }
                                        }

                                        <a href="@Url.Action("TaskDetail", "Employee", new { id = task.Id })"
                                           class="btn btn-info btn-sm" title="Detayları Gör">
                                            <i class="fas fa-eye"></i> Detay
                                        </a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <i class="fas fa-inbox fa-3x text-gray-300 mb-3"></i>
                <h5 class="text-gray-500">Henüz görev bulunmuyor</h5>
                <p class="text-gray-400">Size henüz hiç görev atanmamış.</p>
                <div class="mt-3">
                    <a href="@Url.Action("Index", "Employee")" class="btn btn-primary">
                        <i class="fas fa-home mr-2"></i>Ana Sayfaya Dön
                    </a>
                </div>
            </div>
        }
    </div>
</div>

<!-- CSRF Token -->
@Html.AntiForgeryToken()

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap4.min.js"></script>

    <script>
        $(document).ready(function() {
            // DataTable başlat
            $('#dataTable').DataTable({
                "language": {
                    "url": "//cdn.datatables.net/plug-ins/1.10.24/i18n/Turkish.json"
                },
                "order": [[3, "desc"]], // Oluşturulma tarihi sütununa göre sırala (en yeni en üstte)
                "pageLength": 25,
                "responsive": true,
                "columnDefs": [
                    { "orderable": false, "targets": 5 } // İşlemler sütunu sıralama dışı
                ]
            });

            // Filtre butonları
            $('.btn-group button[data-filter]').on('click', function() {
                // Aktif sınıfı güncelle
                $('.btn-group button').removeClass('active');
                $(this).addClass('active');

                var filter = $(this).data('filter');
                filterTasks(filter);
            });
        });

        // Filtre fonksiyonu
        function filterTasks(filter) {
            var rows = $('.task-item');

            rows.show(); // Önce hepsini göster

            if (filter === 'all') {
                return;
            }

            rows.each(function() {
                var $row = $(this);
                var status = $row.data('status');
                var isOverdue = $row.data('overdue') === true;
                var shouldShow = false;

                switch(filter) {
                    case 'pending':
                        shouldShow = status === 'beklemede';
                        break;
                    case 'ongoing':
                        shouldShow = status === 'devamediyor';
                        break;
                    case 'completed':
                        shouldShow = status === 'tamamlandı';
                        break;
                    case 'overdue':
                        shouldShow = isOverdue;
                        break;
                }

                if (!shouldShow) {
                    $row.hide();
                }
            });
        }

        // Görev durumu güncelleme
        function updateTaskStatus(taskId, status, comment) {
            $.ajax({
                url: '@Url.Action("UpdateTaskStatusAjax", "Employee")',
                type: 'POST',
                data: {
                    taskId: taskId,
                    status: status,
                    comment: comment,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                beforeSend: function() {
                    // Loading durumu
                    $(`#task-row-${taskId}`).addClass('table-secondary');
                },
                success: function(result) {
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Başarılı!',
                            text: result.message,
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata!',
                            text: result.message
                        });
                        $(`#task-row-${taskId}`).removeClass('table-secondary');
                    }
                },
                error: function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata!',
                        text: 'İşlem sırasında bir hata oluştu.'
                    });
                    $(`#task-row-${taskId}`).removeClass('table-secondary');
                }
            });
        }

        // Görev tamamlama (yorum ile)
        function completeTask(taskId) {
            Swal.fire({
                title: 'Görevi Tamamla',
                text: 'Bu görevi tamamladığınızdan emin misiniz?',
                input: 'textarea',
                inputPlaceholder: 'Tamamlama hakkında not ekleyebilirsiniz (opsiyonel)...',
                showCancelButton: true,
                confirmButtonText: 'Evet, Tamamla!',
                cancelButtonText: 'İptal',
                confirmButtonColor: '#28a745'
            }).then((result) => {
                if (result.isConfirmed) {
                    const comment = result.value || 'Görev tamamlandı';
                    updateTaskStatus(taskId, @((int)GorevNet.Models.TaskStatus.Tamamlandı), comment);
                }
            });
        }
    </script>

    <style>
        .progress-sm {
            height: 8px;
        }

        .table-success {
            background-color: rgba(212, 237, 218, 0.3) !important;
        }

        .table-danger {
            background-color: rgba(248, 215, 218, 0.3) !important;
        }

        .btn-group button.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }
    </style>
}Filtrele