@model GorevNet.Models.ViewModels.TaskDisplayViewModel
@{
    ViewBag.Title = "Görev Detayı";
    Layout = "_EmployeeLayout";
}

<!-- Page Heading -->
<div class="d-sm-flex align-items-center justify-content-between mb-4">
    <h1 class="h3 mb-0 text-gray-800">
        <i class="fas fa-file-alt text-info"></i> Görev Detayı
    </h1>
    <div>
        <a href="@Url.Action("ActiveTasks", "Employee")" class="btn btn-secondary btn-sm">
            <i class="fas fa-arrow-left"></i> Aktif Görevler
        </a>
        <a href="@Url.Action("Index", "Employee")" class="btn btn-outline-secondary btn-sm">
            <i class="fas fa-home"></i> Ana Sayfa
        </a>
    </div>
</div>

<div class="row">
    <!-- Ana İçerik -->
    <div class="col-lg-8">
        <div class="card shadow mb-4">
            <div class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-tasks mr-2"></i>@Model.Title
                </h6>
                @{
                    string statusClass = Model.Status switch
                    {
                        GorevNet.Models.TaskStatus.Tamamlandı => "badge-success",
                        GorevNet.Models.TaskStatus.DevamEdiyor => "badge-warning",
                        GorevNet.Models.TaskStatus.Beklemede => "badge-info",
                        _ => "badge-secondary"
                    };
                }
                <span class="badge @statusClass badge-lg">@Model.StatusDisplay</span>
            </div>
            <div class="card-body">

                <!-- Görev Başlığı ve ID -->
                <div class="row mb-3">
                    <div class="col-sm-3">
                        <strong>Görev ID:</strong>
                    </div>
                    <div class="col-sm-9">
                        <span class="text-muted">#@Model.Id</span>
                    </div>
                </div>

                <!-- Görev Başlığı -->
                <div class="row mb-3">
                    <div class="col-sm-3">
                        <strong>Başlık:</strong>
                    </div>
                    <div class="col-sm-9">
                        <h5 class="text-primary">@Model.Title</h5>
                    </div>
                </div>

                <!-- Görev Açıklaması -->
                <div class="row mb-4">
                    <div class="col-sm-3">
                        <strong>Açıklama:</strong>
                    </div>
                    <div class="col-sm-9">
                        <div class="card bg-light border-0">
                            <div class="card-body">
                                @if (!string.IsNullOrEmpty(Model.Description))
                                {
                                    @Html.Raw(Model.Description.Replace("\n", "<br>"))
                                }
                                else
                                {
                                    <em class="text-muted">Açıklama girilmemiş</em>
                                }
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Öncelik ve Durum -->
                <div class="row mb-3">
                    <div class="col-sm-6">
                        <div class="row">
                            <div class="col-sm-6">
                                <strong>Öncelik:</strong>
                            </div>
                            <div class="col-sm-6">
                                @{
                                    string priorityClass = Model.Priority switch
                                    {
                                        GorevNet.Models.TaskPriority.Yüksek => "badge-danger",
                                        GorevNet.Models.TaskPriority.Normal => "badge-primary",
                                        GorevNet.Models.TaskPriority.Düşük => "badge-secondary",
                                        _ => "badge-secondary"
                                    };

                                    string priorityIcon = Model.Priority switch
                                    {
                                        GorevNet.Models.TaskPriority.Yüksek => "🔴",
                                        GorevNet.Models.TaskPriority.Normal => "🟡",
                                        GorevNet.Models.TaskPriority.Düşük => "🔵",
                                        _ => "⚪"
                                    };
                                }
                                <span class="badge @priorityClass">@priorityIcon @Model.PriorityDisplay</span>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div class="row">
                            <div class="col-sm-6">
                                <strong>Durum:</strong>
                            </div>
                            <div class="col-sm-6">
                                <span class="badge @statusClass" id="currentStatus">@Model.StatusDisplay</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- İşlem Butonları -->
                @if (ViewBag.CanEdit && Model.Status != GorevNet.Models.TaskStatus.Tamamlandı)
                {
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0">
                                        <i class="fas fa-cogs mr-2"></i>Hızlı İşlemler
                                    </h6>
                                </div>
                                <div class="card-body">
                                    <div class="btn-group" role="group">
                                        @if (Model.Status == GorevNet.Models.TaskStatus.Beklemede)
                                        {
                                            <button type="button" class="btn btn-success"
                                                    onclick="updateTaskStatus(@Model.Id, @((int)GorevNet.Models.TaskStatus.DevamEdiyor), 'Göreve başladım')">
                                                <i class="fas fa-play mr-1"></i> Göreve Başla
                                            </button>
                                        }
                                        else if (Model.Status == GorevNet.Models.TaskStatus.DevamEdiyor)
                                        {
                                            <button type="button" class="btn btn-warning mr-2"
                                                    onclick="updateTaskStatus(@Model.Id, @((int)GorevNet.Models.TaskStatus.Beklemede), 'Görevi durdurdum')">
                                                <i class="fas fa-pause mr-1"></i> Durdur
                                            </button>
                                            <button type="button" class="btn btn-success"
                                                    onclick="completeTask(@Model.Id)">
                                                <i class="fas fa-check mr-1"></i> Tamamla
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }

                <!-- Yorumlar Bölümü -->
                <div class="row">
                    <div class="col-12">
                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">
                                    <i class="fas fa-comments mr-2"></i>Yorumlar ve Notlar
                                </h6>
                                @if (ViewBag.CanEdit)
                                {
                                    <button type="button" class="btn btn-outline-primary btn-sm" onclick="showAddCommentModal()">
                                        <i class="fas fa-plus mr-1"></i>Yorum Ekle
                                    </button>
                                }
                            </div>
                            <div class="card-body" id="commentsSection">
                                @if (!string.IsNullOrEmpty(Model.Comment))
                                {
                                    <div class="comment-container">
                                        @Html.Raw(Model.Comment.Replace("\n", "<br>"))
                                    </div>
                                }
                                else
                                {
                                    <div class="text-center text-muted py-3">
                                        <i class="fas fa-comment-slash fa-2x mb-2"></i>
                                        <p>Henüz yorum bulunmuyor.</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Yan Bilgiler -->
    <div class="col-lg-4">
        <!-- Tarih Bilgileri -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-calendar-alt mr-2"></i>Zaman Çizelgesi
                </h6>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <!-- Oluşturma Tarihi -->
                    <div class="timeline-item mb-3">
                        <div class="timeline-marker bg-primary"></div>
                        <div class="timeline-content">
                            <h6 class="timeline-title">Görev Oluşturuldu</h6>
                            <p class="timeline-text">@Model.CreatedDate.ToString("dd.MM.yyyy HH:mm")</p>
                            <small class="text-muted">Oluşturan: @Model.CreatedBy</small>
                        </div>
                    </div>

                    <!-- Son Güncelleme -->
                    @if (Model.ModifiedDate.HasValue)
                    {
                        <div class="timeline-item mb-3">
                            <div class="timeline-marker bg-info"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">Son Güncelleme</h6>
                                <p class="timeline-text">@Model.ModifiedDate.Value.ToString("dd.MM.yyyy HH:mm")</p>
                                <small class="text-muted">Güncelleyen: @Model.ModifiedBy</small>
                            </div>
                        </div>
                    }

                    <!-- Bitiş Tarihi -->
                    @if (Model.DueDate.HasValue)
                    {
                        var daysLeft = (Model.DueDate.Value - DateTime.Now).Days;
                        var isOverdue = daysLeft < 0;
                        <div class="timeline-item">
                            <div class="timeline-marker @(isOverdue ? "bg-danger" : daysLeft <= 2 ? "bg-warning" : "bg-success")"></div>
                            <div class="timeline-content">
                                <h6 class="timeline-title">Hedef Bitiş Tarihi</h6>
                                <p class="timeline-text @(isOverdue ? "text-danger" : daysLeft <= 2 ? "text-warning" : "text-success")">
                                    @Model.DueDate.Value.ToString("dd.MM.yyyy")
                                </p>
                                <small class="@(isOverdue ? "text-danger" : daysLeft <= 2 ? "text-warning" : "text-success")">
                                    @if (isOverdue)
                                    {
                                        <text><i class="fas fa-exclamation-triangle"></i> @Math.Abs(daysLeft) gün gecikti</text>
                                    }
                                    else if (daysLeft <= 2)
                                    {
                                        <text><i class="fas fa-clock"></i> @daysLeft gün kaldı</text>
                                    }
                                    else
                                    {
                                        <text><i class="fas fa-check"></i> @daysLeft gün var</text>
                                    }
                                </small>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- İlerleme Kartı -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-chart-line mr-2"></i>Görev İlerlemesi
                </h6>
            </div>
            <div class="card-body text-center">
                @{
                    int progressPercentage = Model.Status switch
                    {
                        GorevNet.Models.TaskStatus.Beklemede => 0,
                        GorevNet.Models.TaskStatus.DevamEdiyor => 50,
                        GorevNet.Models.TaskStatus.Tamamlandı => 100,
                        _ => 0
                    };

                    string progressColor = Model.Status switch
                    {
                        GorevNet.Models.TaskStatus.Beklemede => "info",
                        GorevNet.Models.TaskStatus.DevamEdiyor => "warning",
                        GorevNet.Models.TaskStatus.Tamamlandı => "success",
                        _ => "secondary"
                    };
                }

                <div class="progress mb-3" style="height: 20px;">
                    <div class="progress-bar bg-@progressColor progress-bar-striped @(Model.Status == GorevNet.Models.TaskStatus.DevamEdiyor ? "progress-bar-animated" : "")"
                         role="progressbar"
                         style="width: @progressPercentage%;"
                         aria-valuenow="@progressPercentage"
                         aria-valuemin="0"
                         aria-valuemax="100">
                        @progressPercentage%
                    </div>
                </div>

                <h4 class="text-@progressColor">@Model.StatusDisplay</h4>
                <p class="text-muted mb-0">
                    @if (Model.Status == GorevNet.Models.TaskStatus.Beklemede)
                    {
                        <text>Görev henüz başlamadı</text>
                    }
                    else if (Model.Status == GorevNet.Models.TaskStatus.DevamEdiyor)
                    {
                        <text>Görev devam ediyor</text>
                    }
                    else if (Model.Status == GorevNet.Models.TaskStatus.Tamamlandı)
                    {
                        <text>Görev tamamlandı</text>
                    }
                </p>
            </div>
        </div>

        <!-- Hızlı Linkler -->
        <div class="card shadow">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">
                    <i class="fas fa-external-link-alt mr-2"></i>Hızlı Erişim
                </h6>
            </div>
            <div class="card-body">
                <div class="list-group list-group-flush">
                    <a href="@Url.Action("ActiveTasks", "Employee")" class="list-group-item list-group-item-action">
                        <i class="fas fa-clock fa-fw mr-2 text-warning"></i>
                        Aktif Görevlerim
                    </a>
                    <a href="@Url.Action("AllMyTasks", "Employee")" class="list-group-item list-group-item-action">
                        <i class="fas fa-list fa-fw mr-2 text-primary"></i>
                        Tüm Görevlerim
                    </a>
                    <a href="@Url.Action("Index", "Employee")" class="list-group-item list-group-item-action">
                        <i class="fas fa-home fa-fw mr-2 text-success"></i>
                        Ana Sayfa
                    </a>
                    <a href="@Url.Action("Profile", "Employee")" class="list-group-item list-group-item-action">
                        <i class="fas fa-user fa-fw mr-2 text-info"></i>
                        Profilim
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Yorum Ekleme Modal -->
<div class="modal fade" id="addCommentModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-comment mr-2"></i>Yorum Ekle
                </h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="addCommentForm">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="commentTaskId" value="@Model.Id" />
                    <div class="form-group">
                        <label for="commentText">Yorum:</label>
                        <textarea id="commentText" class="form-control" rows="4" placeholder="Yorumunuzu yazın..." required></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" onclick="addComment()">
                    <i class="fas fa-save mr-1"></i>Yorum Ekle
                </button>
            </div>
        </div>
    </div>
</div>

<!-- CSRF Token -->
@Html.AntiForgeryToken()

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Görev durumu güncelleme
        function updateTaskStatus(taskId, status, comment) {
            $.ajax({
                url: '@Url.Action("UpdateTaskStatusAjax", "Employee")',
                type: 'POST',
                data: {
                    taskId: taskId,
                    status: status,
                    comment: comment,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (result) {
                    if (result.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Başarılı!',
                            text: result.message,
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata!',
                            text: result.message
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata!',
                        text: 'İşlem sırasında bir hata oluştu.'
                    });
                }
            });
        }

        // Görev tamamlama
        function completeTask(taskId) {
            Swal.fire({
                title: 'Görevi Tamamla',
                text: 'Bu görevi tamamladığınızdan emin misiniz?',
                input: 'textarea',
                inputPlaceholder: 'Tamamlama hakkında not ekleyebilirsiniz (opsiyonel)...',
                showCancelButton: true,
                confirmButtonText: 'Evet, Tamamla!',
                cancelButtonText: 'İptal',
                confirmButtonColor: '#28a745'
            }).then((result) => {
                if (result.isConfirmed) {
                    const comment = result.value || 'Görev tamamlandı';
                    updateTaskStatus(taskId, @((int)GorevNet.Models.TaskStatus.Tamamlandı), comment);
                }
            });
        }

        // Yorum ekleme modal
        function showAddCommentModal() {
            $('#addCommentModal').modal('show');
        }

        // Yorum ekleme
        function addComment() {
            const taskId = $('#commentTaskId').val();
            const comment = $('#commentText').val().trim();

            if (!comment) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Uyarı!',
                    text: 'Lütfen yorum yazınız.'
                });
                return;
            }

            $.ajax({
                url: '@Url.Action("AddTaskComment", "Employee")',
                type: 'POST',
                data: {
                    taskId: taskId,
                    comment: comment,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (result) {
                    if (result.success) {
                        $('#addCommentModal').modal('hide');
                        $('#commentText').val('');

                        Swal.fire({
                            icon: 'success',
                            title: 'Başarılı!',
                            text: result.message,
                            timer: 2000,
                            showConfirmButton: false
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Hata!',
                            text: result.message
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Hata!',
                        text: 'Yorum eklenirken bir hata oluştu.'
                    });
                }
            });
        }
    </script>

    <style>
        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline-item {
            position: relative;
        }

        .timeline-marker {
            position: absolute;
            left: -37px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid #fff;
            box-shadow: 0 0 0 2px #dee2e6;
        }

        .timeline-item:not(:last-child)::before {
            content: '';
            position: absolute;
            left: -32px;
            top: 15px;
            width: 2px;
            height: calc(100% + 10px);
            background-color: #dee2e6;
        }

        .timeline-title {
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 0.25rem;
        }

        .timeline-text {
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
        }

        .comment-container {
            background: #f8f9fc;
            border-left: 4px solid #4e73df;
            padding: 15px;
            border-radius: 5px;
            white-space: pre-line;
        }

        .badge-lg {
            font-size: 0.875rem;
            padding: 0.5rem 0.75rem;
        }

        .progress-bar-animated {
            animation: progress-bar-stripes 1s linear infinite;
        }
    </style>
} 
